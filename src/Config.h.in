#ifndef SRC_CONFIG_H_
#define SRC_CONFIG_H_

#include <string>
#include <map>
#include <vector>

#define VERSION_MAJOR @MITAPASS_VERSION_MAJOR@
#define VERSION_MINOR @MITAPASS_VERSION_MINOR@

//SETTINGS
#define AREA_NUM "area_num"
#define TOKEN_NUM "token_num"
#define ROBOT_NUM "robot_num"

#define AREA_WIDTH "area_width"

#define ZONE_NEST_END "zone_nest_end"
#define ZONE_CACHE_END "zone_cache_end"
#define ZONE_SLOPE_END "zone_slope_end"
#define ZONE_SOURCE_END "zone_source_end"

#define TIME_TRY "time_try"
#define TIME_GENERATIONS "time_generations"
#define TIME_RUN "time_run"

#define ENGINE "engine"
#define VISUALIZATION "visualization"

#define LOADFILE "genLoadFile"
#define SAVEFILE "genSaveFile"
#define STEPSAVEFILE "stepSaveFilePrefix"

#define MINGENLOG "minGenToStepLog"
#define MAXGENLOG "maxGenToStepLog"

//OPTIONS
#define ENGINE_FERRANTE "ferrante"
#define ENGINE_MANUAL "manual"
#define ENGINE_NEURAL "neural"

#define VIZ_ANIMATE "animate"
#define VIZ_NONE "none"
#define VIZ_MANUAL "manual"

#define NOFILE "none"

using std::vector;

class Config{
 public:
  Config();
  explicit Config(std::string configFile);

  int readConfig(std::string file);
  std::string getValue(std::string key);

 private:
  std::map<std::string,std::string> values;

  int setOption(std::string key, std::string value);
};

#endif  // SRC_CONFIG_H_
